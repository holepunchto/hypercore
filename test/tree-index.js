var tape = require('tape')
var flat = require('flat-tree')
var tree = require('../lib/tree-index')

tape('set and get', function (t) {
  var index = tree()

  t.same(index.get(0), false, '0 is not set')
  t.same(index.set(0), true, 'set 0 mutates')
  t.same(index.get(0), true, '0 is set')
  t.same(index.set(0), false, 'no mutations')
  t.same(index.set(2), true, 'set 2 mutates')
  t.same(index.get(2), true, '2 is set')
  t.same(index.get(1), true, 'parent of 0 and 2 is set')

  index = tree()
  for (var i = 0; i < 32; i += 2) index.set(i)
  t.same(index.get(7), true, 'ancestor is set')
  t.same(index.get(23), true, 'ancestor is set')
  t.same(index.get(15), true, 'ancestor is set')

  t.end()
})

tape('digest', function (t) {
  var index = tree()
  t.same(index.digest(0), parseInt('0', 2), 'has nothing')

  index = tree()
  index.set(0)
  t.same(index.digest(0), parseInt('1', 2), 'has all')

  index = tree()
  index.set(1)
  t.same(index.digest(0), parseInt('101', 2), 'rooted, no sibling, has parent')

  index = tree()
  index.set(2)
  t.same(index.digest(0), parseInt('10', 2), 'not rooted, has sibling')

  index = tree()
  index.set(1)
  index.set(2)
  t.same(index.digest(0), parseInt('1', 2), 'has all')

  index = tree()
  index.set(3)
  index.set(2)
  t.same(index.digest(0), parseInt('1011', 2), 'rooted, has sibling, no uncle, has grand parent')

  index = tree()
  index.set(5)
  t.same(index.digest(1), parseInt('10', 2), 'not rooted, has sibling')

  t.end()
})

tape('verified by', function (t) {
  var index = tree()
  t.same(index.verifiedBy(0), 0)

  index.set(0)
  t.same(index.verifiedBy(0), 2)
  index.set(2)
  t.same(index.verifiedBy(0), 4)
  index.set(5)
  t.same(index.verifiedBy(0), 8)
  index.set(8)
  t.same(index.verifiedBy(0), 10)

  index = tree()
  index.set(10)
  index.set(8)
  index.set(13)
  index.set(3)
  index.set(17)
  t.same(index.verifiedBy(10), 20)

  index = tree()
  index.set(7)
  index.set(16)
  index.set(18)
  index.set(21)
  index.set(25)
  index.set(28)
  t.same(index.verifiedBy(16), 30)
  t.same(index.verifiedBy(18), 30)
  t.same(index.verifiedBy(17), 30)

  t.end()
})

tape('proof without a digest', function (t) {
  var index = tree()
  t.same(index.proof(0), null)

  index.set(0)
  t.same(index.proof(0), { nodes: [], verifiedBy: 2 })
  index.set(2)
  t.same(index.proof(0), { nodes: [2], verifiedBy: 4 })
  index.set(5)
  t.same(index.proof(0), { nodes: [2, 5], verifiedBy: 8 })
  index.set(8)
  t.same(index.proof(0), { nodes: [2, 5, 8], verifiedBy: 10 })

  index = tree()
  index.set(10)
  index.set(8)
  index.set(13)
  index.set(3)
  index.set(17)
  t.same(index.proof(10), { nodes: [8, 13, 3, 17], verifiedBy: 20 })

  index = tree()
  index.set(7)
  index.set(16)
  index.set(18)
  index.set(21)
  index.set(25)
  index.set(28)
  t.same(index.proof(16), { nodes: [18, 21, 7, 25, 28], verifiedBy: 30 })
  t.same(index.proof(18), { nodes: [16, 21, 7, 25, 28], verifiedBy: 30 })
  t.same(index.proof(17), { nodes: [21, 7, 25, 28], verifiedBy: 30 })

  t.end()
})

tape('proof with a digest', function (t) {
  var index = tree()
  t.same(index.proof(0), null)

  index.set(0)
  index.set(2)
  t.same(index.proof(0, { digest: 1 }), { nodes: [], verifiedBy: 0 })
  index.set(5)
  t.same(index.proof(0, { digest: parseInt('10', 2) }), { nodes: [5], verifiedBy: 8 })
  t.same(index.proof(0, { digest: parseInt('110', 2) }), { nodes: [], verifiedBy: 8 })
  index.set(8)
  t.same(index.proof(0, { digest: parseInt('101', 2) }), { nodes: [2], verifiedBy: 0 })
  t.same(index.proof(0, { digest: parseInt('10', 2) }), { nodes: [5, 8], verifiedBy: 10 })

  index = tree()
  index.set(10)
  index.set(8)
  index.set(13)
  index.set(3)
  index.set(17)
  t.same(index.proof(10, { digest: parseInt('1000001', 2) }), { nodes: [8, 13, 3, 17], verifiedBy: 20 })
  t.same(index.proof(10, { digest: parseInt('10001', 2) }), { nodes: [8, 13, 3], verifiedBy: 0 })
  t.same(index.proof(10, { digest: parseInt('1001', 2) }), { nodes: [8, 13], verifiedBy: 0 })
  t.same(index.proof(10, { digest: parseInt('1000', 2) }), { nodes: [8, 13, 17], verifiedBy: 20 })

  index = tree()
  index.set(7)
  index.set(16)
  index.set(18)
  index.set(21)
  index.set(25)
  index.set(28)
  t.same(index.proof(16, { digest: 1 }), { nodes: [], verifiedBy: 0 })
  t.same(index.proof(18, { digest: parseInt('100', 2) }), { nodes: [16, 7, 25, 28], verifiedBy: 30 })
  t.same(index.proof(18, { digest: parseInt('10', 2) }), { nodes: [21, 7, 25, 28], verifiedBy: 30 })
  t.same(index.proof(17, { digest: parseInt('101', 2) }), { nodes: [21], verifiedBy: 0 })

  t.end()
})

tape('digest sanity checks', function (t) {
  var index = tree()
  index.set(0)
  index.proof(0, { digest: 999999999999999 })
  t.pass('huge digest did not crash')
  t.end()
})

// tests below was generated by a randomizer triggering different replication edge cases

tape('chaos monkey test #1', function (t) {
  var source = tree()
  var clone = tree()
  var i = 0

  source.set(0)
  copy(0, source, clone, t)
  for (i = 0; i < 20; i += 2) source.set(i)
  copy(9, source, clone, t)
  for (i = 0; i < 28; i += 2) source.set(i)
  copy(13, source, clone, t)
  for (i = 0; i < 44; i += 2) source.set(i)
  copy(20, source, clone, t)
  for (i = 0; i < 4400; i += 2) source.set(i)
  copy(2000, source, clone, t)
  for (i = 0; i < 4444; i += 2) source.set(i)
  copy(2010, source, clone, t)
  copy(2200, source, clone, t)
  t.end()
})

tape('chaos monkey test #2', function (t) {
  var source = tree()
  var a = tree()
  var b = tree()

  source.set(0)
  source.set(2)
  source.set(4)
  copy(2, source, a, t)
  copy(2, a, b, t)
  t.end()
})

tape('chaos monkey test #3', function (t) {
  var source = tree()
  var a = tree()
  var b = tree()

  source.set(0)
  source.set(2)
  source.set(4)
  source.set(6)
  source.set(8)
  copy(2, source, b, t)
  source.set(10)
  source.set(12)
  copy(5, source, b, t)
  source.set(14)
  source.set(16)
  copy(5, b, a, t)
  copy(2, b, a, t)
  copy(0, source, b, t)
  copy(7, source, b, t)
  copy(3, source, a, t)
  copy(7, source, a, t)
  source.set(18)
  source.set(20)
  copy(10, source, a, t)
  t.end()
})

tape('chaos monkey test #4', function (t) {
  var source = tree()
  var a = tree()
  var b = tree()

  source.set(0)
  source.set(2)
  source.set(4)
  copy(1, source, a, t)
  copy(0, source, a, t)
  source.set(6)
  source.set(8)
  source.set(10)
  copy(2, source, a, t)
  copy(5, source, a, t)
  source.set(12)
  copy(1, a, b, t)
  source.set(14)
  copy(7, source, a, t)
  copy(2, a, b, t)
  source.set(16)
  copy(8, source, a, t)
  source.set(18)
  copy(9, source, b, t)
  source.set(20)
  source.set(22)
  copy(8, a, b, t)
  source.set(24)
  source.set(26)
  source.set(28)
  copy(4, source, b, t)
  source.set(30)
  copy(11, source, a, t)
  source.set(32)
  source.set(34)
  source.set(36)
  copy(3, source, b, t)
  copy(6, source, a, t)
  copy(11, source, b, t)
  source.set(38)
  source.set(40)
  source.set(42)
  source.set(44)
  source.set(46)
  copy(21, source, a, t)
  source.set(48)
  copy(20, source, a, t)
  copy(16, source, b, t)
  source.set(50)
  copy(21, a, b, t)
  t.end()
})

tape('chaos monkey test #5', function (t) {
  var source = tree()
  var a = tree()
  var b = tree()

  source.set(0)
  copy(0, source, b, t)
  source.set(2)
  copy(0, b, a, t)
  copy(1, source, b, t)
  source.set(4)
  copy(1, b, a, t)
  copy(2, source, b, t)
  source.set(6)
  source.set(8)
  source.set(10)
  source.set(12)
  copy(2, b, a, t)
  source.set(14)
  copy(6, source, b, t)
  source.set(16)
  copy(8, source, a, t)
  copy(4, source, a, t)
  source.set(18)
  copy(4, source, b, t)
  source.set(20)
  copy(6, source, a, t)
  copy(5, source, b, t)
  copy(10, source, a, t)
  copy(3, source, a, t)
  source.set(22)
  source.set(24)
  copy(12, source, a, t)
  copy(11, source, a, t)
  source.set(26)
  source.set(28)
  copy(5, b, a, t)
  copy(10, a, b, t)
  source.set(30)
  copy(3, a, b, t)
  source.set(32)
  copy(13, source, a, t)
  source.set(34)
  source.set(36)
  copy(7, source, a, t)
  copy(18, source, a, t)
  copy(16, source, a, t)
  source.set(38)
  source.set(40)
  source.set(42)
  source.set(44)
  source.set(46)
  source.set(48)
  source.set(50)
  source.set(52)
  source.set(54)
  copy(11, a, b, t)
  copy(25, source, a, t)
  source.set(56)
  source.set(58)
  source.set(60)
  copy(25, a, b, t)
  source.set(62)
  source.set(64)
  source.set(66)
  source.set(68)
  source.set(70)
  source.set(72)
  copy(7, source, b, t)
  copy(27, source, a, t)
  source.set(74)
  copy(22, source, a, t)
  source.set(76)
  source.set(78)
  source.set(80)
  source.set(82)
  source.set(84)
  copy(12, a, b, t)
  source.set(86)
  source.set(88)
  source.set(90)
  source.set(92)
  source.set(94)
  copy(41, source, a, t)
  source.set(96)
  source.set(98)
  copy(22, a, b, t)
  source.set(100)
  source.set(102)
  copy(47, source, a, t)
  source.set(104)
  copy(40, source, a, t)
  copy(47, source, b, t)
  source.set(106)
  source.set(108)
  source.set(110)
  copy(13, source, b, t)
  source.set(112)
  source.set(114)
  copy(35, source, b, t)
  copy(40, a, b, t)
  source.set(116)
  source.set(118)
  source.set(120)
  source.set(122)
  copy(52, source, a, t)
  copy(28, source, a, t)
  copy(18, a, b, t)
  t.end()
})

tape('chaos monkey test #6', function (t) {
  var source = tree()
  var a = tree()
  var b = tree()

  source.set(0)
  source.set(2)
  copy(1, source, b, t)
  copy(0, source, a, t)
  source.set(4)
  copy(1, b, a, t)
  source.set(6)
  source.set(8)
  source.set(10)
  copy(4, source, b, t)
  source.set(12)
  copy(4, b, a, t)
  copy(3, source, b, t)
  source.set(14)
  copy(6, source, a, t)
  copy(6, a, b, t)
  copy(5, source, a, t)
  copy(5, source, b, t)
  source.set(16)
  copy(3, source, a, t)
  source.set(18)
  copy(8, source, a, t)
  copy(7, source, a, t)
  copy(2, source, a, t)
  copy(9, source, a, t)
  source.set(20)
  source.set(22)
  copy(0, a, b, t)
  copy(8, a, b, t)
  source.set(24)
  source.set(26)
  source.set(28)
  source.set(30)
  source.set(32)
  copy(2, source, b, t)
  source.set(34)
  copy(12, source, a, t)
  copy(11, source, a, t)
  copy(9, source, b, t)
  copy(15, source, a, t)
  source.set(36)
  copy(12, source, b, t)
  source.set(38)
  copy(13, source, b, t)
  source.set(40)
  copy(11, a, b, t)
  source.set(42)
  source.set(44)
  source.set(46)
  copy(21, source, a, t)
  source.set(48)
  source.set(50)
  copy(20, source, a, t)
  copy(21, source, b, t)
  source.set(52)
  source.set(54)
  copy(13, b, a, t)
  source.set(56)
  source.set(58)
  source.set(60)
  source.set(62)
  source.set(64)
  source.set(66)
  source.set(68)
  copy(15, source, b, t)
  copy(22, source, a, t)
  source.set(70)
  copy(26, source, a, t)
  source.set(72)
  copy(35, source, b, t)
  source.set(74)
  copy(7, a, b, t)
  source.set(76)
  source.set(78)
  copy(26, a, b, t)
  copy(34, source, b, t)
  copy(29, source, a, t)
  source.set(80)
  source.set(82)
  copy(22, a, b, t)
  copy(29, a, b, t)
  copy(31, source, b, t)
  source.set(84)
  source.set(86)
  source.set(88)
  copy(25, source, b, t)
  copy(36, source, b, t)
  source.set(90)
  source.set(92)
  source.set(94)
  copy(31, source, a, t)
  source.set(96)
  source.set(98)
  source.set(100)
  copy(10, source, a, t)
  source.set(102)
  copy(34, source, a, t)
  source.set(104)
  copy(28, source, a, t)
  copy(35, b, a, t)
  source.set(106)
  source.set(108)
  source.set(110)
  copy(28, source, b, t)
  source.set(112)
  source.set(114)
  copy(45, source, b, t)
  source.set(116)
  source.set(118)
  copy(19, source, a, t)
  source.set(120)
  source.set(122)
  copy(44, source, a, t)
  source.set(124)
  source.set(126)
  source.set(128)
  source.set(130)
  source.set(132)
  copy(40, source, a, t)
  source.set(134)
  copy(54, source, b, t)
  copy(54, b, a, t)
  source.set(136)
  source.set(138)
  source.set(140)
  source.set(142)
  copy(25, b, a, t)
  source.set(144)
  source.set(146)
  source.set(148)
  source.set(150)
  copy(32, source, a, t)
  copy(48, source, b, t)
  source.set(152)
  copy(45, b, a, t)
  copy(17, source, a, t)
  source.set(154)
  source.set(156)
  source.set(158)
  source.set(160)
  source.set(162)
  source.set(164)
  source.set(166)
  copy(60, source, b, t)
  source.set(168)
  source.set(170)
  copy(61, source, b, t)
  source.set(172)
  copy(19, source, b, t)
  source.set(174)
  copy(18, source, a, t)
  copy(60, source, a, t)
  source.set(176)
  copy(16, source, a, t)
  source.set(178)
  copy(88, source, b, t)
  copy(74, source, b, t)
  source.set(180)
  source.set(182)
  source.set(184)
  source.set(186)
  source.set(188)
  copy(73, source, b, t)
  source.set(190)
  source.set(192)
  source.set(194)
  source.set(196)
  source.set(198)
  source.set(200)
  copy(67, source, a, t)
  source.set(202)
  copy(94, source, a, t)
  source.set(204)
  copy(51, source, a, t)
  source.set(206)
  copy(103, source, b, t)
  copy(41, source, a, t)
  source.set(208)
  copy(20, a, b, t)
  copy(76, source, a, t)
  source.set(210)
  source.set(212)
  source.set(214)
  source.set(216)
  source.set(218)
  source.set(220)
  copy(53, source, a, t)
  source.set(222)
  source.set(224)
  copy(58, source, b, t)
  source.set(226)
  source.set(228)
  source.set(230)
  source.set(232)
  source.set(234)
  source.set(236)
  copy(100, source, a, t)
  copy(85, source, a, t)
  source.set(238)
  copy(41, a, b, t)
  source.set(240)
  copy(93, source, b, t)
  source.set(242)
  source.set(244)
  source.set(246)
  copy(100, a, b, t)
  copy(63, source, b, t)
  source.set(248)
  source.set(250)
  copy(30, source, b, t)
  source.set(252)
  copy(88, b, a, t)
  t.end()
})

tape('chaos monkey test #7', function (t) {
  var source = tree()
  var a = tree()
  var b = tree()

  source.set(0)
  copy(0, source, b, t)
  source.set(2)
  source.set(4)
  source.set(6)
  copy(1, source, b, t)
  source.set(8)
  source.set(10)
  source.set(12)
  source.set(14)
  source.set(16)
  copy(1, b, a, t)
  source.set(18)
  source.set(20)
  source.set(22)
  source.set(24)
  source.set(26)
  source.set(28)
  source.set(30)
  copy(3, source, a, t)
  source.set(32)
  copy(4, source, b, t)
  source.set(34)
  source.set(36)
  source.set(38)
  source.set(40)
  source.set(42)
  source.set(44)
  copy(0, b, a, t)
  source.set(46)
  copy(4, b, a, t)
  source.set(48)
  source.set(50)
  source.set(52)
  source.set(54)
  copy(27, source, a, t)
  source.set(56)
  source.set(58)
  source.set(60)
  source.set(62)
  source.set(64)
  source.set(66)
  source.set(68)
  source.set(70)
  source.set(72)
  source.set(74)
  source.set(76)
  source.set(78)
  source.set(80)
  source.set(82)
  source.set(84)
  source.set(86)
  source.set(88)
  source.set(90)
  source.set(92)
  source.set(94)
  source.set(96)
  source.set(98)
  source.set(100)
  source.set(102)
  copy(7, source, a, t)
  source.set(104)
  source.set(106)
  source.set(108)
  copy(41, source, a, t)
  source.set(110)
  copy(7, a, b, t)
  source.set(112)
  source.set(114)
  source.set(116)
  source.set(118)
  copy(48, source, b, t)
  source.set(120)
  copy(59, source, b, t)
  copy(30, source, b, t)
  source.set(122)
  source.set(124)
  copy(49, source, b, t)
  source.set(126)
  source.set(128)
  copy(10, source, b, t)
  source.set(130)
  source.set(132)
  copy(10, b, a, t)
  source.set(134)
  source.set(136)
  source.set(138)
  source.set(140)
  source.set(142)
  source.set(144)
  copy(13, source, b, t)
  source.set(146)
  source.set(148)
  source.set(150)
  source.set(152)
  source.set(154)
  source.set(156)
  source.set(158)
  source.set(160)
  copy(6, source, b, t)
  source.set(162)
  source.set(164)
  source.set(166)
  source.set(168)
  copy(53, source, a, t)
  source.set(170)
  source.set(172)
  source.set(174)
  source.set(176)
  source.set(178)
  source.set(180)
  source.set(182)
  source.set(184)
  copy(48, b, a, t)
  source.set(186)
  source.set(188)
  source.set(190)
  copy(81, source, a, t)
  source.set(192)
  source.set(194)
  copy(9, source, b, t)
  source.set(196)
  source.set(198)
  copy(69, source, b, t)
  source.set(200)
  source.set(202)
  source.set(204)
  copy(23, source, a, t)
  source.set(206)
  source.set(208)
  source.set(210)
  copy(80, source, b, t)
  source.set(212)
  copy(74, source, b, t)
  source.set(214)
  copy(41, a, b, t)
  source.set(216)
  source.set(218)
  copy(76, source, a, t)
  source.set(220)
  copy(24, source, a, t)
  source.set(222)
  copy(85, source, a, t)
  source.set(224)
  source.set(226)
  copy(53, a, b, t)
  t.end()
})

tape('chaos monkey randomized', function (t) {
  var blocks = 0
  var source = tree()
  var peers = [source, tree(), tree(), tree(), tree(), tree(), tree(), tree(), tree()]

  for (var i = 0; i < 5000; i++) {
    if (Math.random() < 0.3) {
      var next = blocks++
      source.set(2 * next)
      source.have = source.have || []
      source.have.push(next)
    }
    if (Math.random() < 0.5) {
      var a = peers[(Math.random() * peers.length) | 0]
      var b = peers[(Math.random() * peers.length) | 0]

      if (!a.have || a === b) continue
      var want = a.have[(a.have.length * Math.random()) | 0]
      if (b.have && b.have.indexOf(want) > -1) continue

      copy(want, a, b, t)
      b.have = b.have || []
      if (b.have.indexOf(want) === -1) b.have.push(want)
    }
  }
  t.end()
})

function copy (block, from, to, t) {
  var proof = from.proof(2 * block, { digest: to.digest(2 * block) })
  var i = 0

  if (proof.roots) {
    for (i = 0; i < proof.roots.length; i++) {
      if (!to.set(proof.roots[i])) t.fail('duplicate root (' + proof.roots[i] + ')')
    }
  }

  for (i = 0; i < proof.nodes.length; i++) {
    if (!to.set(proof.nodes[i])) t.fail('duplicate node (' + proof.nodes[i] + ')')
  }

  to.set(2 * block)

  if (proof.verifiedBy) {
    var roots = flat.fullRoots(proof.verifiedBy)

    for (i = 0; i < roots.length; i++) {
      if (!to.get(roots[i])) t.fail('missing root for ' + block + ' (' + roots[i] + ')')
    }

    var tmp = 2 * block
    for (i = 0; i < 40; i++) {
      if (roots.indexOf(tmp) > -1) {
        t.pass('copied and verified block ' + block)
        return
      }
      tmp = flat.parent(tmp)
      if (!to.get(tmp)) break
    }

    t.fail('does not validate')
  }
}
